{
  "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_NFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PS_ADDRESS_TOKEN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PS_STAGE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WL_STAGE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_to",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantity",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasBurnStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasPSMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPublicSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasWLMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasWhitelistSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mintNFT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintWhitelist",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_num",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_WL_STAGE_LIMIT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_PS_STAGE_LIMIT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MAX_PS_ADDRESS_TOKEN",
          "type": "uint256"
        }
      ],
      "name": "setMAX_NFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasWhitelistSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistSaleTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasPublicSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_hasBurnStarted",
          "type": "bool"
        }
      ],
      "name": "setSwitch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "set_PRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSaleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
  "receipt": {
    "to": null,
    "from": "0x5279246E3626Cebe71a4c181382A50a71d2A4156",
    "contractAddress": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
    "transactionIndex": 54,
    "gasUsed": "3358520",
    "logsBloom": "0x26000080100000000040004400808000000082000010000000800000000000024002004040004200000000000400000000003000060481a000200016002400000410310000000088808000080000000018430000000400110008000810020000090000000208400000000001000008002000400040000600000000100440004000820204000008000100000000080412180019000006000000000040000000000004000001020000200001020100000000000008028080600020100804014000401010020000001004000000000000000820200080000008200001084000603aa000400200000000080000100020000008000000008004040108008002880000",
    "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20",
    "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
    "logs": [
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 125,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 126,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 139,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000010"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000011"
        ],
        "data": "0x",
        "logIndex": 141,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000012"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000013"
        ],
        "data": "0x",
        "logIndex": 143,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000014"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000015"
        ],
        "data": "0x",
        "logIndex": 145,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000016"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 147,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000018"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000019"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001a"
        ],
        "data": "0x",
        "logIndex": 150,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 151,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001c"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001d"
        ],
        "data": "0x",
        "logIndex": 153,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 154,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001f"
        ],
        "data": "0x",
        "logIndex": 155,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000020"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000021"
        ],
        "data": "0x",
        "logIndex": 157,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000022"
        ],
        "data": "0x",
        "logIndex": 158,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000023"
        ],
        "data": "0x",
        "logIndex": 159,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000024"
        ],
        "data": "0x",
        "logIndex": 160,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000025"
        ],
        "data": "0x",
        "logIndex": 161,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000026"
        ],
        "data": "0x",
        "logIndex": 162,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000027"
        ],
        "data": "0x",
        "logIndex": 163,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000028"
        ],
        "data": "0x",
        "logIndex": 164,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000029"
        ],
        "data": "0x",
        "logIndex": 165,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002a"
        ],
        "data": "0x",
        "logIndex": 166,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002b"
        ],
        "data": "0x",
        "logIndex": 167,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002c"
        ],
        "data": "0x",
        "logIndex": 168,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002d"
        ],
        "data": "0x",
        "logIndex": 169,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002e"
        ],
        "data": "0x",
        "logIndex": 170,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002f"
        ],
        "data": "0x",
        "logIndex": 171,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000030"
        ],
        "data": "0x",
        "logIndex": 172,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      },
      {
        "transactionIndex": 54,
        "blockNumber": 7737588,
        "transactionHash": "0x33a3de7cb2f4f6aa1e66597dbb57cf10cc1de8b35817200f1f9b79bd93b49e2e",
        "address": "0xf7F0a4E88e5DC28f76168dE519557D238BEC2F88",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000031"
        ],
        "data": "0x",
        "logIndex": 173,
        "blockHash": "0x78b87c92ed311dec13faa7923155a157c334fd62431cd1036d8fb0e704ebdf20"
      }
    ],
    "blockNumber": 7737588,
    "cumulativeGasUsed": "22560933",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5ed59d767242f11c2893e7339eb876e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PS_ADDRESS_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PS_STAGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WL_STAGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantity\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBurnStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasPSMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPublicSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasWLMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasWhitelistSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mintNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintWhitelist\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_num\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_WL_STAGE_LIMIT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PS_STAGE_LIMIT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MAX_PS_ADDRESS_TOKEN\",\"type\":\"uint256\"}],\"name\":\"setMAX_NFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasWhitelistSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistSaleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasPublicSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasBurnStarted\",\"type\":\"bool\"}],\"name\":\"setSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SETTVDAO.sol\":\"SETTVDAO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**128 - 1 (max value of uint128).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n    }\\n\\n    // Compiler will pack the following \\n    // _currentIndex and _burnCounter into a single 256bit word.\\n    \\n    // The tokenId of the next token to be minted.\\n    uint128 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint128 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return _currentIndex - _burnCounter;    \\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (!ownership.burned) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n        revert TokenIndexOutOfBounds();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        // Execution should never reach this point.\\n        revert();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant: \\n                    // There will always be an ownership that has an address and is not burned \\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 3.4e38 (2**128) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            _currentIndex = uint128(updatedIndex);\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked { \\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {\\n        // SoulBound Token\\n        for (uint index = 0; index < quantity; index++) {\\n            uint256 tokenId = startTokenId + index;\\n            if (tokenId >= 50 && tokenId <= 115){\\n                require(from == address(0) || to == address(0), \\\"SOULBOUND: Non-Transferable\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x33299e2c163c00e44027833da8f1dcd7e146b3a791867a6d54244b7ca3208eaa\",\"license\":\"MIT\"},\"contracts/SETTVDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d     \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551   \\u255a\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2551      \\u2588\\u2588\\u2551    \\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d   \\u255a\\u2550\\u255d      \\u255a\\u2550\\u255d     \\u255a\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\ncontract SETTVDAO is Ownable, EIP712, ERC721A {\\n    using SafeMath for uint256;\\n    using Strings for uint256;\\n\\n    // Sales variables\\n    // ------------------------------------------------------------------------\\n    uint256 public MAX_NFT = 999;\\n    uint256 public WL_STAGE_LIMIT = 399; // 83 Whitelist\\n    uint256 public PS_STAGE_LIMIT = 999; // 600 Public Sale\\n    uint256 public MAX_PS_ADDRESS_TOKEN = 2;\\n    uint256 public PRICE = 0.05 ether;\\n    uint256 public whitelistSaleTimestamp = 1647198840;\\n    uint256 public publicSaleTimestamp = 1647198840;\\n    bool public hasWhitelistSaleStarted = false;\\n    bool public hasPublicSaleStarted = false;\\n    bool public hasBurnStarted = false;\\n    string private _baseTokenURI = \\\"http://api.liondaonft.com/Metadata/\\\"; //\\n    address public treasury = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n    address public signer = 0x5279246E3626Cebe71a4c181382A50a71d2A4156;\\n\\n    mapping(address => uint256) public hasPSMinted;\\n    mapping(address => uint256) public hasWLMinted;\\n\\n    // Events\\n    // ------------------------------------------------------------------------\\n    event mintEvent(address owner, uint256 quantity, uint256 totalSupply);\\n\\n    // Constructor\\n    // ------------------------------------------------------------------------\\n    constructor() \\n\\tEIP712(\\\"SETTVDAO\\\", \\\"1.0.0\\\") \\n\\tERC721A(\\\"SETTVDAO\\\", \\\"SET\\\") {\\n        _safeMint(treasury, 50);\\n    }\\n\\n    // Modifiers\\n    // ------------------------------------------------------------------------\\n    modifier onlyWhitelistSale() {\\n        require(hasWhitelistSaleStarted == true, \\\"WHITELIST_NOT_ACTIVE\\\");\\n        require(block.timestamp >= whitelistSaleTimestamp, \\\"NOT_IN_WHITELIST_TIME\\\");\\n        _;\\n    }\\n\\n    modifier callerIsUser() {\\n        require(tx.origin == msg.sender, \\\"CALLER_IS_CONTRACT\\\");\\n        _;\\n    }\\n\\n    // Verify functions\\n    // ------------------------------------------------------------------------\\n    function verify(uint256 maxQuantity, bytes memory SIGNATURE) public view returns (bool){\\n        address recoveredAddr = ECDSA.recover(\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"NFT(address addressForClaim,uint256 maxQuantity)\\\"\\n                        ),\\n                        _msgSender(),\\n                        maxQuantity\\n                    )\\n                )\\n            ),\\n            SIGNATURE\\n        );\\n\\n        return signer == recoveredAddr;\\n    }\\n\\n    // Airdrop functions\\n    // ------------------------------------------------------------------------\\n    function airdrop(address[] calldata _to, uint256[] calldata quantity) public onlyOwner{\\n        uint256 count = _to.length;\\n\\t\\tuint256 airdropQuantity = 0;\\n\\n\\t\\tfor (uint256 i = 0; i < count; i++) {\\n\\t\\t\\tairdropQuantity += quantity[i];\\n\\t\\t}\\n\\n\\t\\trequire(totalSupply() + airdropQuantity <= MAX_NFT, \\\"EXCEEDS_MAX_NFT\\\");\\n\\n        for (uint256 i = 0; i < count; i++) {\\n            _safeMint(_to[i], quantity[i]);\\n            emit mintEvent(_to[i], quantity[i], totalSupply());\\n        }\\n    }\\n\\n    // Whitelist functions\\n    // ------------------------------------------------------------------------\\n    function mintWhitelist(uint256 quantity, uint256 maxQuantity, bytes memory SIGNATURE) external payable onlyWhitelistSale {\\n        require(totalSupply().add(quantity) <= WL_STAGE_LIMIT, \\\"WL_STAGE_SOLD_OUT\\\");\\n        require(verify(maxQuantity, SIGNATURE), \\\"NOT_ELIGIBLE_FOT_WHITELIST\\\");\\n        require(quantity > 0 && hasWLMinted[msg.sender].add(quantity) <= maxQuantity, \\\"EXCEEDS_MAX_WL_QUANTITY\\\");\\n        require(msg.value >= PRICE.mul(quantity), \\\"ETHER_VALUE_NOT_ENOUGH\\\");\\n\\n        hasWLMinted[msg.sender] = hasWLMinted[msg.sender].add(quantity);\\n        _safeMint(msg.sender, quantity);\\n\\n        emit mintEvent(msg.sender, quantity, totalSupply());\\n    }\\n\\n    // Public Sale functions\\n    // ------------------------------------------------------------------------\\n    function mintNFT(uint256 quantity) external payable callerIsUser {\\n        require(hasPublicSaleStarted == true, \\\"SALE_NOT_ACTIVE\\\");\\n        require(block.timestamp >= publicSaleTimestamp, \\\"NOT_IN_SALE_TIME\\\");\\n        require(msg.value >= PRICE.mul(quantity), \\\"ETHER_VALUE_NOT_ENOUGH\\\");\\n        require(totalSupply().add(quantity) <= PS_STAGE_LIMIT, \\\"PS_STAGE_SOLD_OUT\\\");\\n        require(totalSupply().add(quantity) <= MAX_NFT, \\\"EXCEEDS_MAX_NFT\\\");\\n        require(quantity > 0 && hasPSMinted[msg.sender].add(quantity) <= MAX_PS_ADDRESS_TOKEN, \\\"EXCEEDS_MAX_PS_QUANTITY\\\");\\n\\n        hasPSMinted[msg.sender] = hasPSMinted[msg.sender].add(quantity);\\n        _safeMint(msg.sender, quantity);\\n\\n        emit mintEvent(msg.sender, quantity, totalSupply());\\n    }\\n\\n    // Burn Functions\\n    // ------------------------------------------------------------------------\\n    function burn(address account, uint256 id) public virtual {\\n        require(hasBurnStarted == true, \\\"BURN_NOT_ACTIVE\\\");\\n        require(account == tx.origin || isApprovedForAll(account, _msgSender()), \\\"CALLER_NOT_OWNER_NOR_APPROVED\\\");\\n        require(ownerOf(id) == account, \\\"ADDRESS_NOT_TOKENID_OWNER\\\");\\n\\n        _burn(id);\\n    }\\n\\n    // Base URI Functions\\n    // ------------------------------------------------------------------------\\n    function tokenURI(uint256 tokenId) public view override returns (string memory){\\n        require(_exists(tokenId), \\\"TOKEN_NOT_EXISTS\\\");\\n\\n        return string(abi.encodePacked(_baseTokenURI, tokenId.toString()));\\n    }\\n\\n    // setting functions\\n    // ------------------------------------------------------------------------\\n    function setURI(string calldata _tokenURI) public onlyOwner {\\n        _baseTokenURI = _tokenURI;\\n    }\\n\\n    function setMAX_NFT(\\n        uint256 _MAX_num,\\n        uint256 _WL_STAGE_LIMIT,\\n        uint256 _PS_STAGE_LIMIT,\\n        uint256 _MAX_PS_ADDRESS_TOKEN\\n    ) public onlyOwner {\\n        MAX_NFT = _MAX_num;\\n        WL_STAGE_LIMIT = _WL_STAGE_LIMIT;\\n        PS_STAGE_LIMIT = _PS_STAGE_LIMIT;\\n        MAX_PS_ADDRESS_TOKEN = _MAX_PS_ADDRESS_TOKEN;\\n    }\\n\\n    function set_PRICE(uint256 _price) public onlyOwner {\\n        PRICE = _price;\\n    }\\n\\n    function setSwitch(\\n        bool _hasWhitelistSaleStarted,\\n        uint256 _whitelistSaleTimestamp,\\n        bool _hasPublicSaleStarted,\\n        uint256 _publicSaleTimestamp,\\n        bool _hasBurnStarted\\n    ) public onlyOwner {\\n        hasWhitelistSaleStarted = _hasWhitelistSaleStarted;\\n        whitelistSaleTimestamp = _whitelistSaleTimestamp;\\n        hasPublicSaleStarted = _hasPublicSaleStarted;\\n        publicSaleTimestamp = _publicSaleTimestamp;\\n        hasBurnStarted = _hasBurnStarted;\\n    }\\n\\n    function setSigner(address _signer) public onlyOwner {\\n        require(_signer != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        signer = _signer;\\n    }\\n\\n    // Withdrawal functions\\n    // ------------------------------------------------------------------------\\n    function setTreasury(address _treasury) public onlyOwner {\\n        require(treasury != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        treasury = _treasury;\\n    }\\n\\n    function withdrawAll() public payable onlyOwner {\\n        require(payable(treasury).send(address(this).balance));\\n    }\\n}\\n\",\"keccak256\":\"0x34738c3130dc332b75fd8570a7d4c2973c45a0a62adea85fe7e2b5636fe04d97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6103e7600881905561018f600955600a556002600b5566b1a2bc2ec50000600c5563622e4278600d819055600e55600f805462ffffff19169055610180604052602361012081815290620039f3610140398051620000669160109160209091019062000631565b5060118054735279246e3626cebe71a4c181382a50a71d2a41566001600160a01b03199182168117909255601280549091169091179055348015620000aa57600080fd5b5060405180604001604052806008815260200167534554545644414f60c01b8152506040518060400160405280600381526020016214d15560ea1b81525060405180604001604052806008815260200167534554545644414f60c01b815250604051806040016040528060058152602001640312e302e360dc1b815250620001416200013b6200021360201b60201c565b62000217565b815160209283012081519183019190912060c082815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810195909552608080860193909352308583015280518086039092018252939092019092528051908401209052610100528251620001db916002919085019062000631565b508051620001f190600390602084019062000631565b50506011546200020d91506001600160a01b0316603262000267565b6200080d565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620002898282604051806020016040528060008152506200028d60201b60201c565b5050565b6200029c8383836001620002a1565b505050565b6001546001600160801b03166001600160a01b038516620002d457604051622e076360e81b815260040160405180910390fd5b83620002f35760405163b562e8dd60e01b815260040160405180910390fd5b62000302600086838762000442565b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c018116918217680100000000000000006001600160401b031990941690921783900481168c018116909202179091558584526004909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b85811015620004195760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4838015620003ed5750620003eb6000888488620004fc565b155b156200040c576040516368d2bf6b60e11b815260040160405180910390fd5b6001918201910162000392565b50600180546001600160801b0319166001600160801b03929092169190911790555b5050505050565b60005b818110156200043b5760006200045c828562000781565b90506032811015801562000471575060738111155b15620004e6576001600160a01b03861615806200049557506001600160a01b038516155b620004e65760405162461bcd60e51b815260206004820152601b60248201527f534f554c424f554e443a204e6f6e2d5472616e7366657261626c650000000000604482015260640160405180910390fd5b5080620004f381620007d9565b91505062000445565b60006200051d846001600160a01b03166200062b60201b62001a1b1760201c565b156200061f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200055790339089908890889060040162000708565b602060405180830381600087803b1580156200057257600080fd5b505af1925050508015620005a5575060408051601f3d908101601f19168201909252620005a291810190620006d7565b60015b62000604573d808015620005d6576040519150601f19603f3d011682016040523d82523d6000602084013e620005db565b606091505b508051620005fc576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062000623565b5060015b949350505050565b3b151590565b8280546200063f906200079c565b90600052602060002090601f016020900481019282620006635760008555620006ae565b82601f106200067e57805160ff1916838001178555620006ae565b82800160010185558215620006ae579182015b82811115620006ae57825182559160200191906001019062000691565b50620006bc929150620006c0565b5090565b5b80821115620006bc5760008155600101620006c1565b600060208284031215620006e9578081fd5b81516001600160e01b03198116811462000701578182fd5b9392505050565b600060018060a01b0380871683526020818716818501528560408501526080606085015284519150816080850152825b82811015620007565785810182015185820160a00152810162000738565b8281111562000768578360a084870101525b5050601f01601f19169190910160a00195945050505050565b60008219821115620007975762000797620007f7565b500190565b600181811c90821680620007b157607f821691505b60208210811415620007d357634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620007f057620007f0620007f7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051610100516131a16200085260003960006123e2015260006124310152600061240c01526000612390015260006123b901526131a16000f3fe6080604052600436106102725760003560e01c8063672434821161014f57806392642744116100c1578063e6d7e1341161007a578063e6d7e13414610719578063e6e4f2731461072f578063e985e9c51461074f578063f0f4426014610798578063f2fde38b146107b8578063fdd4b0f0146107d857600080fd5b8063926427441461067157806395d89b41146106845780639dc29fac14610699578063a22cb465146106b9578063b88d4fde146106d9578063c87b56dd146106f957600080fd5b80637cdcc512116101135780637cdcc512146105df578063853828b6146105f557806385852ce4146105fd5780638d859f3e1461061d5780638da5cb5b1461063357806391e299801461065157600080fd5b806367243482146105545780636c19e783146105745780636fdaddf11461059457806370a08231146105aa578063715018a6146105ca57600080fd5b806332a61f5f116101e85780634f6ccce7116101ac5780634f6ccce71461049157806352e96828146104b157806353c27fd2146104c757806361d027b3146104f45780636352211e146105145780636456c2051461053457600080fd5b806332a61f5f146104185780633da30a3014610432578063401dd7161461044857806342842e0e1461045e57806343774ebd1461047e57600080fd5b8063095ea7b31161023a578063095ea7b314610348578063099c70711461036857806318160ddd146103a3578063238ac933146103b857806323b872dd146103d85780632f745c59146103f857600080fd5b806301ffc9a71461027757806302a4e187146102ac57806302fe5305146102ce57806306fdde03146102ee578063081812fc14610310575b600080fd5b34801561028357600080fd5b50610297610292366004612d2a565b6107f7565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102cc6102c7366004612cd4565b610864565b005b3480156102da57600080fd5b506102cc6102e9366004612d62565b6108da565b3480156102fa57600080fd5b50610303610915565b6040516102a39190612fd3565b34801561031c57600080fd5b5061033061032b366004612dce565b6109a7565b6040516001600160a01b0390911681526020016102a3565b34801561035457600080fd5b506102cc610363366004612c43565b6109eb565b34801561037457600080fd5b50610395610383366004612b2e565b60136020526000908152604090205481565b6040519081526020016102a3565b3480156103af57600080fd5b50610395610a74565b3480156103c457600080fd5b50601254610330906001600160a01b031681565b3480156103e457600080fd5b506102cc6103f3366004612b7a565b610a93565b34801561040457600080fd5b50610395610413366004612c43565b610a9e565b34801561042457600080fd5b50600f546102979060ff1681565b34801561043e57600080fd5b50610395600a5481565b34801561045457600080fd5b5061039560095481565b34801561046a57600080fd5b506102cc610479366004612b7a565b610b9a565b6102cc61048c366004612e2a565b610bb5565b34801561049d57600080fd5b506103956104ac366004612dce565b610e54565b3480156104bd57600080fd5b50610395600d5481565b3480156104d357600080fd5b506103956104e2366004612b2e565b60146020526000908152604090205481565b34801561050057600080fd5b50601154610330906001600160a01b031681565b34801561052057600080fd5b5061033061052f366004612dce565b610f00565b34801561054057600080fd5b506102cc61054f366004612dce565b610f12565b34801561056057600080fd5b506102cc61056f366004612c6c565b610f41565b34801561058057600080fd5b506102cc61058f366004612b2e565b61114c565b3480156105a057600080fd5b5061039560085481565b3480156105b657600080fd5b506103956105c5366004612b2e565b6111e5565b3480156105d657600080fd5b506102cc611233565b3480156105eb57600080fd5b50610395600b5481565b6102cc611269565b34801561060957600080fd5b50610297610618366004612de6565b6112c4565b34801561062957600080fd5b50610395600c5481565b34801561063f57600080fd5b506000546001600160a01b0316610330565b34801561065d57600080fd5b50600f546102979062010000900460ff1681565b6102cc61067f366004612dce565b61134e565b34801561069057600080fd5b5061030361161f565b3480156106a557600080fd5b506102cc6106b4366004612c43565b61162e565b3480156106c557600080fd5b506102cc6106d4366004612c1a565b61175b565b3480156106e557600080fd5b506102cc6106f4366004612bb5565b6117f1565b34801561070557600080fd5b50610303610714366004612dce565b61182b565b34801561072557600080fd5b50610395600e5481565b34801561073b57600080fd5b506102cc61074a366004612e77565b6118a7565b34801561075b57600080fd5b5061029761076a366004612b48565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156107a457600080fd5b506102cc6107b3366004612b2e565b6118e5565b3480156107c457600080fd5b506102cc6107d3366004612b2e565b611980565b3480156107e457600080fd5b50600f5461029790610100900460ff1681565b60006001600160e01b031982166380ac58cd60e01b148061082857506001600160e01b03198216635b5e139f60e01b145b8061084357506001600160e01b0319821663780e9d6360e01b145b8061085e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146108975760405162461bcd60e51b815260040161088e90612fe6565b60405180910390fd5b600f8054600d95909555600e929092551515620100000262ff0000199215156101000261ff00199515159590951661ffff19909416939093179390931716179055565b6000546001600160a01b031633146109045760405162461bcd60e51b815260040161088e90612fe6565b610910601083836129a1565b505050565b606060028054610924906130a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610950906130a9565b801561099d5780601f106109725761010080835404028352916020019161099d565b820191906000526020600020905b81548152906001019060200180831161098057829003601f168201915b5050505050905090565b60006109b282611a21565b6109cf576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006109f682610f00565b9050806001600160a01b0316836001600160a01b03161415610a2b5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610a4b5750610a49813361076a565b155b15610a69576040516367d9dca160e11b815260040160405180910390fd5b610910838383611a57565b6001546001600160801b03600160801b82048116918116919091031690565b610910838383611ab3565b6000610aa9836111e5565b8210610ac8576040516306ed618760e11b815260040160405180910390fd5b6001546001600160801b0316600080805b83811015610b9457600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161580159282019290925290610b405750610b8c565b80516001600160a01b031615610b5557805192505b876001600160a01b0316836001600160a01b03161415610b8a5786841415610b835750935061085e92505050565b6001909301925b505b600101610ad9565b50600080fd5b610910838383604051806020016040528060008152506117f1565b600f5460ff161515600114610c035760405162461bcd60e51b815260206004820152601460248201527357484954454c4953545f4e4f545f41435449564560601b604482015260640161088e565b600d54421015610c4d5760405162461bcd60e51b81526020600482015260156024820152744e4f545f494e5f57484954454c4953545f54494d4560581b604482015260640161088e565b600954610c6284610c5c610a74565b90611cdd565b1115610ca45760405162461bcd60e51b815260206004820152601160248201527015d317d4d51051d157d4d3d31117d3d555607a1b604482015260640161088e565b610cae82826112c4565b610cfa5760405162461bcd60e51b815260206004820152601a60248201527f4e4f545f454c494749424c455f464f545f57484954454c495354000000000000604482015260640161088e565b600083118015610d245750336000908152601460205260409020548290610d219085611cdd565b11155b610d705760405162461bcd60e51b815260206004820152601760248201527f455843454544535f4d41585f574c5f5155414e54495459000000000000000000604482015260640161088e565b600c54610d7d9084611cf0565b341015610dc55760405162461bcd60e51b815260206004820152601660248201527508aa8908aa4beac8298aa8abe9c9ea8be8a9c9eaa8e960531b604482015260640161088e565b33600090815260146020526040902054610ddf9084611cdd565b33600081815260146020526040902091909155610dfc9084611cfc565b7f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603384610e27610a74565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a1505050565b6001546000906001600160801b031681805b82811015610ee657600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290610edd5785831415610ed65750949350505050565b6001909201915b50600101610e66565b506040516329c8c00760e21b815260040160405180910390fd5b6000610f0b82611d16565b5192915050565b6000546001600160a01b03163314610f3c5760405162461bcd60e51b815260040161088e90612fe6565b600c55565b6000546001600160a01b03163314610f6b5760405162461bcd60e51b815260040161088e90612fe6565b826000805b82811015610fbe57848482818110610f9857634e487b7160e01b600052603260045260246000fd5b9050602002013582610faa919061301b565b915080610fb6816130e4565b915050610f70565b5060085481610fcb610a74565b610fd5919061301b565b11156110155760405162461bcd60e51b815260206004820152600f60248201526e115610d1515114d7d3505617d39195608a1b604482015260640161088e565b60005b828110156111435761108487878381811061104357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110589190612b2e565b86868481811061107857634e487b7160e01b600052603260045260246000fd5b90506020020135611cfc565b7f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608787838181106110c557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110da9190612b2e565b8686848181106110fa57634e487b7160e01b600052603260045260246000fd5b90506020020135611109610a74565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a18061113b816130e4565b915050611018565b50505050505050565b6000546001600160a01b031633146111765760405162461bcd60e51b815260040161088e90612fe6565b6001600160a01b0381166111c35760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b604482015260640161088e565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03821661120e576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6000546001600160a01b0316331461125d5760405162461bcd60e51b815260040161088e90612fe6565b6112676000611e3a565b565b6000546001600160a01b031633146112935760405162461bcd60e51b815260040161088e90612fe6565b6011546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505061126757600080fd5b60008061133561132f7f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b03909116908201526060810187905260800160405160208183030381529060405280519060200120611e8a565b84611ed8565b6012546001600160a01b03918216911614949350505050565b3233146113925760405162461bcd60e51b815260206004820152601260248201527110d05313115497d254d7d0d3d395149050d560721b604482015260640161088e565b600f5460ff6101009091041615156001146113e15760405162461bcd60e51b815260206004820152600f60248201526e53414c455f4e4f545f41435449564560881b604482015260640161088e565b600e544210156114265760405162461bcd60e51b815260206004820152601060248201526f4e4f545f494e5f53414c455f54494d4560801b604482015260640161088e565b600c546114339082611cf0565b34101561147b5760405162461bcd60e51b815260206004820152601660248201527508aa8908aa4beac8298aa8abe9c9ea8be8a9c9eaa8e960531b604482015260640161088e565b600a5461148a82610c5c610a74565b11156114cc5760405162461bcd60e51b81526020600482015260116024820152701414d7d4d51051d157d4d3d31117d3d555607a1b604482015260640161088e565b6008546114db82610c5c610a74565b111561151b5760405162461bcd60e51b815260206004820152600f60248201526e115610d1515114d7d3505617d39195608a1b604482015260640161088e565b6000811180156115465750600b54336000908152601360205260409020546115439083611cdd565b11155b6115925760405162461bcd60e51b815260206004820152601760248201527f455843454544535f4d41585f50535f5155414e54495459000000000000000000604482015260640161088e565b336000908152601360205260409020546115ac9082611cdd565b336000818152601360205260409020919091556115c99082611cfc565b7f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc7956033826115f4610a74565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a150565b606060038054610924906130a9565b600f5462010000900460ff16151560011461167d5760405162461bcd60e51b815260206004820152600f60248201526e4255524e5f4e4f545f41435449564560881b604482015260640161088e565b6001600160a01b0382163214806116995750611699823361076a565b6116e55760405162461bcd60e51b815260206004820152601d60248201527f43414c4c45525f4e4f545f4f574e45525f4e4f525f415050524f564544000000604482015260640161088e565b816001600160a01b03166116f882610f00565b6001600160a01b03161461174e5760405162461bcd60e51b815260206004820152601960248201527f414444524553535f4e4f545f544f4b454e49445f4f574e455200000000000000604482015260640161088e565b61175781611efc565b5050565b6001600160a01b0382163314156117855760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6117fc848484611ab3565b611808848484846120ab565b611825576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061183682611a21565b6118755760405162461bcd60e51b815260206004820152601060248201526f544f4b454e5f4e4f545f45584953545360801b604482015260640161088e565b6010611880836121ba565b604051602001611891929190612ef0565b6040516020818303038152906040529050919050565b6000546001600160a01b031633146118d15760405162461bcd60e51b815260040161088e90612fe6565b600893909355600991909155600a55600b55565b6000546001600160a01b0316331461190f5760405162461bcd60e51b815260040161088e90612fe6565b6011546001600160a01b031661195e5760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b604482015260640161088e565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146119aa5760405162461bcd60e51b815260040161088e90612fe6565b6001600160a01b038116611a0f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161088e565b611a1881611e3a565b50565b3b151590565b6001546000906001600160801b03168210801561085e575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611abe82611d16565b80519091506000906001600160a01b0316336001600160a01b03161480611aec57508151611aec903361076a565b80611b07575033611afc846109a7565b6001600160a01b0316145b905080611b2757604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611b5c5760405162a1148160e81b815260040160405180910390fd5b6001600160a01b038416611b8357604051633a954ecd60e21b815260040160405180910390fd5b611b9085858560016122d3565b611ba06000848460000151611a57565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611c93576001546001600160801b0316811015611c9357825160008281526004602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6000611ce9828461301b565b9392505050565b6000611ce98284613047565b61175782826040518060200160405280600081525061237f565b604080516060810182526000808252602082018190529181019190915260015482906001600160801b0316811015611e2157600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290611e1f5780516001600160a01b031615611db6579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611e1a579392505050565b611db6565b505b604051636f96cda160e11b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061085e611e9761238c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611ee7858561247f565b91509150611ef4816124ef565b509392505050565b6000611f0782611d16565b9050611f1b816000015160008460016122d3565b611f2b6000838360000151611a57565b80516001600160a01b039081166000908152600560209081526040808320805467ffffffffffffffff1981166001600160401b0391821660001901821617909155855185168452818420805467ffffffffffffffff60801b198116600160801b9182900484166001908101851690920217909155865188865260049094528285208054600160e01b9588166001600160e01b031990911617600160a01b42909416939093029290921760ff60e01b191693909317905590850180835291205490911661204b576001546001600160801b031681101561204b57815160008281526004602090815260409091208054918501516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b50805160405183916000916001600160a01b03909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050600180546001600160801b03600160801b808304821684018216029116179055565b60006001600160a01b0384163b156121ae57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906120ef903390899088908890600401612f96565b602060405180830381600087803b15801561210957600080fd5b505af1925050508015612139575060408051601f3d908101601f1916820190925261213691810190612d46565b60015b612194573d808015612167576040519150601f19603f3d011682016040523d82523d6000602084013e61216c565b606091505b50805161218c576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506121b2565b5060015b949350505050565b6060816121de5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561220857806121f2816130e4565b91506122019050600a83613033565b91506121e2565b6000816001600160401b0381111561223057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561225a576020820181803683370190505b5090505b84156121b25761226f600183613066565b915061227c600a866130ff565b61228790603061301b565b60f81b8183815181106122aa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506122cc600a86613033565b945061225e565b60005b81811015611cd65760006122ea828561301b565b9050603281101580156122fe575060738111155b1561236c576001600160a01b038616158061232057506001600160a01b038516155b61236c5760405162461bcd60e51b815260206004820152601b60248201527f534f554c424f554e443a204e6f6e2d5472616e7366657261626c650000000000604482015260640161088e565b5080612377816130e4565b9150506122d6565b61091083838360016126f0565b60007f00000000000000000000000000000000000000000000000000000000000000004614156123db57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156124b65760208301516040840151606085015160001a6124aa87828585612885565b945094505050506124e8565b8251604014156124e057602083015160408401516124d5868383612972565b9350935050506124e8565b506000905060025b9250929050565b600081600481111561251157634e487b7160e01b600052602160045260246000fd5b141561251a5750565b600181600481111561253c57634e487b7160e01b600052602160045260246000fd5b141561258a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161088e565b60028160048111156125ac57634e487b7160e01b600052602160045260246000fd5b14156125fa5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161088e565b600381600481111561261c57634e487b7160e01b600052602160045260246000fd5b14156126755760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161088e565b600481600481111561269757634e487b7160e01b600052602160045260246000fd5b1415611a185760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161088e565b6001546001600160801b03166001600160a01b03851661272257604051622e076360e81b815260040160405180910390fd5b836127405760405163b562e8dd60e01b815260040160405180910390fd5b61274d60008683876122d3565b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526004909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b8581101561285f5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4838015612835575061283360008884886120ab565b155b15612853576040516368d2bf6b60e11b815260040160405180910390fd5b600191820191016127de565b50600180546001600160801b0319166001600160801b0392909216919091179055611cd6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156128bc5750600090506003612969565b8460ff16601b141580156128d457508460ff16601c14155b156128e55750600090506004612969565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612939573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661296257600060019250925050612969565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161299387828885612885565b935093505050935093915050565b8280546129ad906130a9565b90600052602060002090601f0160209004810192826129cf5760008555612a15565b82601f106129e85782800160ff19823516178555612a15565b82800160010185558215612a15579182015b82811115612a155782358255916020019190600101906129fa565b50612a21929150612a25565b5090565b5b80821115612a215760008155600101612a26565b80356001600160a01b0381168114612a5157600080fd5b919050565b60008083601f840112612a67578081fd5b5081356001600160401b03811115612a7d578182fd5b6020830191508360208260051b85010111156124e857600080fd5b80358015158114612a5157600080fd5b600082601f830112612ab8578081fd5b81356001600160401b0380821115612ad257612ad261313f565b604051601f8301601f19908116603f01168101908282118183101715612afa57612afa61313f565b81604052838152866020858801011115612b12578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612b3f578081fd5b611ce982612a3a565b60008060408385031215612b5a578081fd5b612b6383612a3a565b9150612b7160208401612a3a565b90509250929050565b600080600060608486031215612b8e578081fd5b612b9784612a3a565b9250612ba560208501612a3a565b9150604084013590509250925092565b60008060008060808587031215612bca578081fd5b612bd385612a3a565b9350612be160208601612a3a565b92506040850135915060608501356001600160401b03811115612c02578182fd5b612c0e87828801612aa8565b91505092959194509250565b60008060408385031215612c2c578182fd5b612c3583612a3a565b9150612b7160208401612a98565b60008060408385031215612c55578182fd5b612c5e83612a3a565b946020939093013593505050565b60008060008060408587031215612c81578384fd5b84356001600160401b0380821115612c97578586fd5b612ca388838901612a56565b90965094506020870135915080821115612cbb578384fd5b50612cc887828801612a56565b95989497509550505050565b600080600080600060a08688031215612ceb578081fd5b612cf486612a98565b945060208601359350612d0960408701612a98565b925060608601359150612d1e60808701612a98565b90509295509295909350565b600060208284031215612d3b578081fd5b8135611ce981613155565b600060208284031215612d57578081fd5b8151611ce981613155565b60008060208385031215612d74578182fd5b82356001600160401b0380821115612d8a578384fd5b818501915085601f830112612d9d578384fd5b813581811115612dab578485fd5b866020828501011115612dbc578485fd5b60209290920196919550909350505050565b600060208284031215612ddf578081fd5b5035919050565b60008060408385031215612df8578182fd5b8235915060208301356001600160401b03811115612e14578182fd5b612e2085828601612aa8565b9150509250929050565b600080600060608486031215612e3e578081fd5b833592506020840135915060408401356001600160401b03811115612e61578182fd5b612e6d86828701612aa8565b9150509250925092565b60008060008060808587031215612e8c578182fd5b5050823594602084013594506040840135936060013592509050565b60008151808452612ec081602086016020860161307d565b601f01601f19169290920160200192915050565b60008151612ee681856020860161307d565b9290920192915050565b600080845482600182811c915080831680612f0c57607f831692505b6020808410821415612f2c57634e487b7160e01b87526022600452602487fd5b818015612f405760018114612f5157612f7d565b60ff19861689528489019650612f7d565b60008b815260209020885b86811015612f755781548b820152908501908301612f5c565b505084890196505b505050505050612f8d8185612ed4565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612fc990830184612ea8565b9695505050505050565b602081526000611ce96020830184612ea8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561302e5761302e613113565b500190565b60008261304257613042613129565b500490565b600081600019048311821515161561306157613061613113565b500290565b60008282101561307857613078613113565b500390565b60005b83811015613098578181015183820152602001613080565b838111156118255750506000910152565b600181811c908216806130bd57607f821691505b602082108114156130de57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156130f8576130f8613113565b5060010190565b60008261310e5761310e613129565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611a1857600080fdfea264697066735822122012384d2289ec80e37f32ef4a38436c817d6ae78db6f98f651119a2f36282462564736f6c63430008040033687474703a2f2f6170692e6c696f6e64616f6e66742e636f6d2f4d657461646174612f",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c8063672434821161014f57806392642744116100c1578063e6d7e1341161007a578063e6d7e13414610719578063e6e4f2731461072f578063e985e9c51461074f578063f0f4426014610798578063f2fde38b146107b8578063fdd4b0f0146107d857600080fd5b8063926427441461067157806395d89b41146106845780639dc29fac14610699578063a22cb465146106b9578063b88d4fde146106d9578063c87b56dd146106f957600080fd5b80637cdcc512116101135780637cdcc512146105df578063853828b6146105f557806385852ce4146105fd5780638d859f3e1461061d5780638da5cb5b1461063357806391e299801461065157600080fd5b806367243482146105545780636c19e783146105745780636fdaddf11461059457806370a08231146105aa578063715018a6146105ca57600080fd5b806332a61f5f116101e85780634f6ccce7116101ac5780634f6ccce71461049157806352e96828146104b157806353c27fd2146104c757806361d027b3146104f45780636352211e146105145780636456c2051461053457600080fd5b806332a61f5f146104185780633da30a3014610432578063401dd7161461044857806342842e0e1461045e57806343774ebd1461047e57600080fd5b8063095ea7b31161023a578063095ea7b314610348578063099c70711461036857806318160ddd146103a3578063238ac933146103b857806323b872dd146103d85780632f745c59146103f857600080fd5b806301ffc9a71461027757806302a4e187146102ac57806302fe5305146102ce57806306fdde03146102ee578063081812fc14610310575b600080fd5b34801561028357600080fd5b50610297610292366004612d2a565b6107f7565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102cc6102c7366004612cd4565b610864565b005b3480156102da57600080fd5b506102cc6102e9366004612d62565b6108da565b3480156102fa57600080fd5b50610303610915565b6040516102a39190612fd3565b34801561031c57600080fd5b5061033061032b366004612dce565b6109a7565b6040516001600160a01b0390911681526020016102a3565b34801561035457600080fd5b506102cc610363366004612c43565b6109eb565b34801561037457600080fd5b50610395610383366004612b2e565b60136020526000908152604090205481565b6040519081526020016102a3565b3480156103af57600080fd5b50610395610a74565b3480156103c457600080fd5b50601254610330906001600160a01b031681565b3480156103e457600080fd5b506102cc6103f3366004612b7a565b610a93565b34801561040457600080fd5b50610395610413366004612c43565b610a9e565b34801561042457600080fd5b50600f546102979060ff1681565b34801561043e57600080fd5b50610395600a5481565b34801561045457600080fd5b5061039560095481565b34801561046a57600080fd5b506102cc610479366004612b7a565b610b9a565b6102cc61048c366004612e2a565b610bb5565b34801561049d57600080fd5b506103956104ac366004612dce565b610e54565b3480156104bd57600080fd5b50610395600d5481565b3480156104d357600080fd5b506103956104e2366004612b2e565b60146020526000908152604090205481565b34801561050057600080fd5b50601154610330906001600160a01b031681565b34801561052057600080fd5b5061033061052f366004612dce565b610f00565b34801561054057600080fd5b506102cc61054f366004612dce565b610f12565b34801561056057600080fd5b506102cc61056f366004612c6c565b610f41565b34801561058057600080fd5b506102cc61058f366004612b2e565b61114c565b3480156105a057600080fd5b5061039560085481565b3480156105b657600080fd5b506103956105c5366004612b2e565b6111e5565b3480156105d657600080fd5b506102cc611233565b3480156105eb57600080fd5b50610395600b5481565b6102cc611269565b34801561060957600080fd5b50610297610618366004612de6565b6112c4565b34801561062957600080fd5b50610395600c5481565b34801561063f57600080fd5b506000546001600160a01b0316610330565b34801561065d57600080fd5b50600f546102979062010000900460ff1681565b6102cc61067f366004612dce565b61134e565b34801561069057600080fd5b5061030361161f565b3480156106a557600080fd5b506102cc6106b4366004612c43565b61162e565b3480156106c557600080fd5b506102cc6106d4366004612c1a565b61175b565b3480156106e557600080fd5b506102cc6106f4366004612bb5565b6117f1565b34801561070557600080fd5b50610303610714366004612dce565b61182b565b34801561072557600080fd5b50610395600e5481565b34801561073b57600080fd5b506102cc61074a366004612e77565b6118a7565b34801561075b57600080fd5b5061029761076a366004612b48565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156107a457600080fd5b506102cc6107b3366004612b2e565b6118e5565b3480156107c457600080fd5b506102cc6107d3366004612b2e565b611980565b3480156107e457600080fd5b50600f5461029790610100900460ff1681565b60006001600160e01b031982166380ac58cd60e01b148061082857506001600160e01b03198216635b5e139f60e01b145b8061084357506001600160e01b0319821663780e9d6360e01b145b8061085e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146108975760405162461bcd60e51b815260040161088e90612fe6565b60405180910390fd5b600f8054600d95909555600e929092551515620100000262ff0000199215156101000261ff00199515159590951661ffff19909416939093179390931716179055565b6000546001600160a01b031633146109045760405162461bcd60e51b815260040161088e90612fe6565b610910601083836129a1565b505050565b606060028054610924906130a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610950906130a9565b801561099d5780601f106109725761010080835404028352916020019161099d565b820191906000526020600020905b81548152906001019060200180831161098057829003601f168201915b5050505050905090565b60006109b282611a21565b6109cf576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006109f682610f00565b9050806001600160a01b0316836001600160a01b03161415610a2b5760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b03821614801590610a4b5750610a49813361076a565b155b15610a69576040516367d9dca160e11b815260040160405180910390fd5b610910838383611a57565b6001546001600160801b03600160801b82048116918116919091031690565b610910838383611ab3565b6000610aa9836111e5565b8210610ac8576040516306ed618760e11b815260040160405180910390fd5b6001546001600160801b0316600080805b83811015610b9457600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161580159282019290925290610b405750610b8c565b80516001600160a01b031615610b5557805192505b876001600160a01b0316836001600160a01b03161415610b8a5786841415610b835750935061085e92505050565b6001909301925b505b600101610ad9565b50600080fd5b610910838383604051806020016040528060008152506117f1565b600f5460ff161515600114610c035760405162461bcd60e51b815260206004820152601460248201527357484954454c4953545f4e4f545f41435449564560601b604482015260640161088e565b600d54421015610c4d5760405162461bcd60e51b81526020600482015260156024820152744e4f545f494e5f57484954454c4953545f54494d4560581b604482015260640161088e565b600954610c6284610c5c610a74565b90611cdd565b1115610ca45760405162461bcd60e51b815260206004820152601160248201527015d317d4d51051d157d4d3d31117d3d555607a1b604482015260640161088e565b610cae82826112c4565b610cfa5760405162461bcd60e51b815260206004820152601a60248201527f4e4f545f454c494749424c455f464f545f57484954454c495354000000000000604482015260640161088e565b600083118015610d245750336000908152601460205260409020548290610d219085611cdd565b11155b610d705760405162461bcd60e51b815260206004820152601760248201527f455843454544535f4d41585f574c5f5155414e54495459000000000000000000604482015260640161088e565b600c54610d7d9084611cf0565b341015610dc55760405162461bcd60e51b815260206004820152601660248201527508aa8908aa4beac8298aa8abe9c9ea8be8a9c9eaa8e960531b604482015260640161088e565b33600090815260146020526040902054610ddf9084611cdd565b33600081815260146020526040902091909155610dfc9084611cfc565b7f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603384610e27610a74565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a1505050565b6001546000906001600160801b031681805b82811015610ee657600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290610edd5785831415610ed65750949350505050565b6001909201915b50600101610e66565b506040516329c8c00760e21b815260040160405180910390fd5b6000610f0b82611d16565b5192915050565b6000546001600160a01b03163314610f3c5760405162461bcd60e51b815260040161088e90612fe6565b600c55565b6000546001600160a01b03163314610f6b5760405162461bcd60e51b815260040161088e90612fe6565b826000805b82811015610fbe57848482818110610f9857634e487b7160e01b600052603260045260246000fd5b9050602002013582610faa919061301b565b915080610fb6816130e4565b915050610f70565b5060085481610fcb610a74565b610fd5919061301b565b11156110155760405162461bcd60e51b815260206004820152600f60248201526e115610d1515114d7d3505617d39195608a1b604482015260640161088e565b60005b828110156111435761108487878381811061104357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110589190612b2e565b86868481811061107857634e487b7160e01b600052603260045260246000fd5b90506020020135611cfc565b7f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608787838181106110c557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906110da9190612b2e565b8686848181106110fa57634e487b7160e01b600052603260045260246000fd5b90506020020135611109610a74565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a18061113b816130e4565b915050611018565b50505050505050565b6000546001600160a01b031633146111765760405162461bcd60e51b815260040161088e90612fe6565b6001600160a01b0381166111c35760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b604482015260640161088e565b601280546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03821661120e576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6000546001600160a01b0316331461125d5760405162461bcd60e51b815260040161088e90612fe6565b6112676000611e3a565b565b6000546001600160a01b031633146112935760405162461bcd60e51b815260040161088e90612fe6565b6011546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505061126757600080fd5b60008061133561132f7f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b03909116908201526060810187905260800160405160208183030381529060405280519060200120611e8a565b84611ed8565b6012546001600160a01b03918216911614949350505050565b3233146113925760405162461bcd60e51b815260206004820152601260248201527110d05313115497d254d7d0d3d395149050d560721b604482015260640161088e565b600f5460ff6101009091041615156001146113e15760405162461bcd60e51b815260206004820152600f60248201526e53414c455f4e4f545f41435449564560881b604482015260640161088e565b600e544210156114265760405162461bcd60e51b815260206004820152601060248201526f4e4f545f494e5f53414c455f54494d4560801b604482015260640161088e565b600c546114339082611cf0565b34101561147b5760405162461bcd60e51b815260206004820152601660248201527508aa8908aa4beac8298aa8abe9c9ea8be8a9c9eaa8e960531b604482015260640161088e565b600a5461148a82610c5c610a74565b11156114cc5760405162461bcd60e51b81526020600482015260116024820152701414d7d4d51051d157d4d3d31117d3d555607a1b604482015260640161088e565b6008546114db82610c5c610a74565b111561151b5760405162461bcd60e51b815260206004820152600f60248201526e115610d1515114d7d3505617d39195608a1b604482015260640161088e565b6000811180156115465750600b54336000908152601360205260409020546115439083611cdd565b11155b6115925760405162461bcd60e51b815260206004820152601760248201527f455843454544535f4d41585f50535f5155414e54495459000000000000000000604482015260640161088e565b336000908152601360205260409020546115ac9082611cdd565b336000818152601360205260409020919091556115c99082611cfc565b7f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc7956033826115f4610a74565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a150565b606060038054610924906130a9565b600f5462010000900460ff16151560011461167d5760405162461bcd60e51b815260206004820152600f60248201526e4255524e5f4e4f545f41435449564560881b604482015260640161088e565b6001600160a01b0382163214806116995750611699823361076a565b6116e55760405162461bcd60e51b815260206004820152601d60248201527f43414c4c45525f4e4f545f4f574e45525f4e4f525f415050524f564544000000604482015260640161088e565b816001600160a01b03166116f882610f00565b6001600160a01b03161461174e5760405162461bcd60e51b815260206004820152601960248201527f414444524553535f4e4f545f544f4b454e49445f4f574e455200000000000000604482015260640161088e565b61175781611efc565b5050565b6001600160a01b0382163314156117855760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6117fc848484611ab3565b611808848484846120ab565b611825576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b606061183682611a21565b6118755760405162461bcd60e51b815260206004820152601060248201526f544f4b454e5f4e4f545f45584953545360801b604482015260640161088e565b6010611880836121ba565b604051602001611891929190612ef0565b6040516020818303038152906040529050919050565b6000546001600160a01b031633146118d15760405162461bcd60e51b815260040161088e90612fe6565b600893909355600991909155600a55600b55565b6000546001600160a01b0316331461190f5760405162461bcd60e51b815260040161088e90612fe6565b6011546001600160a01b031661195e5760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b604482015260640161088e565b601180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146119aa5760405162461bcd60e51b815260040161088e90612fe6565b6001600160a01b038116611a0f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161088e565b611a1881611e3a565b50565b3b151590565b6001546000906001600160801b03168210801561085e575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6000611abe82611d16565b80519091506000906001600160a01b0316336001600160a01b03161480611aec57508151611aec903361076a565b80611b07575033611afc846109a7565b6001600160a01b0316145b905080611b2757604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b031614611b5c5760405162a1148160e81b815260040160405180910390fd5b6001600160a01b038416611b8357604051633a954ecd60e21b815260040160405180910390fd5b611b9085858560016122d3565b611ba06000848460000151611a57565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b429092169190910217909255908601808352912054909116611c93576001546001600160801b0316811015611c9357825160008281526004602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6000611ce9828461301b565b9392505050565b6000611ce98284613047565b61175782826040518060200160405280600081525061237f565b604080516060810182526000808252602082018190529181019190915260015482906001600160801b0316811015611e2157600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290611e1f5780516001600160a01b031615611db6579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff1615159281019290925215611e1a579392505050565b611db6565b505b604051636f96cda160e11b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061085e611e9761238c565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611ee7858561247f565b91509150611ef4816124ef565b509392505050565b6000611f0782611d16565b9050611f1b816000015160008460016122d3565b611f2b6000838360000151611a57565b80516001600160a01b039081166000908152600560209081526040808320805467ffffffffffffffff1981166001600160401b0391821660001901821617909155855185168452818420805467ffffffffffffffff60801b198116600160801b9182900484166001908101851690920217909155865188865260049094528285208054600160e01b9588166001600160e01b031990911617600160a01b42909416939093029290921760ff60e01b191693909317905590850180835291205490911661204b576001546001600160801b031681101561204b57815160008281526004602090815260409091208054918501516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b50805160405183916000916001600160a01b03909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050600180546001600160801b03600160801b808304821684018216029116179055565b60006001600160a01b0384163b156121ae57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906120ef903390899088908890600401612f96565b602060405180830381600087803b15801561210957600080fd5b505af1925050508015612139575060408051601f3d908101601f1916820190925261213691810190612d46565b60015b612194573d808015612167576040519150601f19603f3d011682016040523d82523d6000602084013e61216c565b606091505b50805161218c576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506121b2565b5060015b949350505050565b6060816121de5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561220857806121f2816130e4565b91506122019050600a83613033565b91506121e2565b6000816001600160401b0381111561223057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561225a576020820181803683370190505b5090505b84156121b25761226f600183613066565b915061227c600a866130ff565b61228790603061301b565b60f81b8183815181106122aa57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506122cc600a86613033565b945061225e565b60005b81811015611cd65760006122ea828561301b565b9050603281101580156122fe575060738111155b1561236c576001600160a01b038616158061232057506001600160a01b038516155b61236c5760405162461bcd60e51b815260206004820152601b60248201527f534f554c424f554e443a204e6f6e2d5472616e7366657261626c650000000000604482015260640161088e565b5080612377816130e4565b9150506122d6565b61091083838360016126f0565b60007f00000000000000000000000000000000000000000000000000000000000000004614156123db57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000808251604114156124b65760208301516040840151606085015160001a6124aa87828585612885565b945094505050506124e8565b8251604014156124e057602083015160408401516124d5868383612972565b9350935050506124e8565b506000905060025b9250929050565b600081600481111561251157634e487b7160e01b600052602160045260246000fd5b141561251a5750565b600181600481111561253c57634e487b7160e01b600052602160045260246000fd5b141561258a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161088e565b60028160048111156125ac57634e487b7160e01b600052602160045260246000fd5b14156125fa5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161088e565b600381600481111561261c57634e487b7160e01b600052602160045260246000fd5b14156126755760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161088e565b600481600481111561269757634e487b7160e01b600052602160045260246000fd5b1415611a185760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161088e565b6001546001600160801b03166001600160a01b03851661272257604051622e076360e81b815260040160405180910390fd5b836127405760405163b562e8dd60e01b815260040160405180910390fd5b61274d60008683876122d3565b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526004909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b8581101561285f5760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4838015612835575061283360008884886120ab565b155b15612853576040516368d2bf6b60e11b815260040160405180910390fd5b600191820191016127de565b50600180546001600160801b0319166001600160801b0392909216919091179055611cd6565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156128bc5750600090506003612969565b8460ff16601b141580156128d457508460ff16601c14155b156128e55750600090506004612969565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612939573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661296257600060019250925050612969565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161299387828885612885565b935093505050935093915050565b8280546129ad906130a9565b90600052602060002090601f0160209004810192826129cf5760008555612a15565b82601f106129e85782800160ff19823516178555612a15565b82800160010185558215612a15579182015b82811115612a155782358255916020019190600101906129fa565b50612a21929150612a25565b5090565b5b80821115612a215760008155600101612a26565b80356001600160a01b0381168114612a5157600080fd5b919050565b60008083601f840112612a67578081fd5b5081356001600160401b03811115612a7d578182fd5b6020830191508360208260051b85010111156124e857600080fd5b80358015158114612a5157600080fd5b600082601f830112612ab8578081fd5b81356001600160401b0380821115612ad257612ad261313f565b604051601f8301601f19908116603f01168101908282118183101715612afa57612afa61313f565b81604052838152866020858801011115612b12578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612b3f578081fd5b611ce982612a3a565b60008060408385031215612b5a578081fd5b612b6383612a3a565b9150612b7160208401612a3a565b90509250929050565b600080600060608486031215612b8e578081fd5b612b9784612a3a565b9250612ba560208501612a3a565b9150604084013590509250925092565b60008060008060808587031215612bca578081fd5b612bd385612a3a565b9350612be160208601612a3a565b92506040850135915060608501356001600160401b03811115612c02578182fd5b612c0e87828801612aa8565b91505092959194509250565b60008060408385031215612c2c578182fd5b612c3583612a3a565b9150612b7160208401612a98565b60008060408385031215612c55578182fd5b612c5e83612a3a565b946020939093013593505050565b60008060008060408587031215612c81578384fd5b84356001600160401b0380821115612c97578586fd5b612ca388838901612a56565b90965094506020870135915080821115612cbb578384fd5b50612cc887828801612a56565b95989497509550505050565b600080600080600060a08688031215612ceb578081fd5b612cf486612a98565b945060208601359350612d0960408701612a98565b925060608601359150612d1e60808701612a98565b90509295509295909350565b600060208284031215612d3b578081fd5b8135611ce981613155565b600060208284031215612d57578081fd5b8151611ce981613155565b60008060208385031215612d74578182fd5b82356001600160401b0380821115612d8a578384fd5b818501915085601f830112612d9d578384fd5b813581811115612dab578485fd5b866020828501011115612dbc578485fd5b60209290920196919550909350505050565b600060208284031215612ddf578081fd5b5035919050565b60008060408385031215612df8578182fd5b8235915060208301356001600160401b03811115612e14578182fd5b612e2085828601612aa8565b9150509250929050565b600080600060608486031215612e3e578081fd5b833592506020840135915060408401356001600160401b03811115612e61578182fd5b612e6d86828701612aa8565b9150509250925092565b60008060008060808587031215612e8c578182fd5b5050823594602084013594506040840135936060013592509050565b60008151808452612ec081602086016020860161307d565b601f01601f19169290920160200192915050565b60008151612ee681856020860161307d565b9290920192915050565b600080845482600182811c915080831680612f0c57607f831692505b6020808410821415612f2c57634e487b7160e01b87526022600452602487fd5b818015612f405760018114612f5157612f7d565b60ff19861689528489019650612f7d565b60008b815260209020885b86811015612f755781548b820152908501908301612f5c565b505084890196505b505050505050612f8d8185612ed4565b95945050505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612fc990830184612ea8565b9695505050505050565b602081526000611ce96020830184612ea8565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561302e5761302e613113565b500190565b60008261304257613042613129565b500490565b600081600019048311821515161561306157613061613113565b500290565b60008282101561307857613078613113565b500390565b60005b83811015613098578181015183820152602001613080565b838111156118255750506000910152565b600181811c908216806130bd57607f821691505b602082108114156130de57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156130f8576130f8613113565b5060010190565b60008261310e5761310e613129565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114611a1857600080fdfea264697066735822122012384d2289ec80e37f32ef4a38436c817d6ae78db6f98f651119a2f36282462564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2901,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 2903,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_burnCounter",
        "offset": 16,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 2905,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2912,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2892_storage)"
      },
      {
        "astId": 2917,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)2899_storage)"
      },
      {
        "astId": 2921,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2927,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4242,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "MAX_NFT",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4245,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "WL_STAGE_LIMIT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4248,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "PS_STAGE_LIMIT",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4251,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "MAX_PS_ADDRESS_TOKEN",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4254,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "PRICE",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4257,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "whitelistSaleTimestamp",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4260,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "publicSaleTimestamp",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4263,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "hasWhitelistSaleStarted",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 4266,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "hasPublicSaleStarted",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 4269,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "hasBurnStarted",
        "offset": 2,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 4272,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 4275,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "treasury",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 4278,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "signer",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 4282,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "hasPSMinted",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4286,
        "contract": "contracts/SETTVDAO.sol:SETTVDAO",
        "label": "hasWLMinted",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2899_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2899_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2892_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2892_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2899_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2894,
            "contract": "contracts/SETTVDAO.sol:SETTVDAO",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2896,
            "contract": "contracts/SETTVDAO.sol:SETTVDAO",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2898,
            "contract": "contracts/SETTVDAO.sol:SETTVDAO",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2892_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2887,
            "contract": "contracts/SETTVDAO.sol:SETTVDAO",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2889,
            "contract": "contracts/SETTVDAO.sol:SETTVDAO",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2891,
            "contract": "contracts/SETTVDAO.sol:SETTVDAO",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}